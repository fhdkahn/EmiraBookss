import React, { useState, createContext, useContext } from 'react';
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from 'react-router-dom';
import { 
  HomeIcon, 
  DocumentTextIcon, 
  CurrencyDollarIcon, 
  ArchiveBoxIcon, 
  ChartBarIcon, 
  Cog6ToothIcon,
  ArrowLeftOnRectangleIcon,
  UserCircleIcon,
  BellIcon
} from '@heroicons/react/24/outline';

// Add TypeScript declarations for the external libraries
declare global {
  interface Window {
    jspdf: {
      jsPDF: any;
    };
    html2canvas: (element: HTMLElement) => Promise<HTMLCanvasElement>;
    html2pdf: (element: HTMLElement, options?: {
      margin?: number | number[];
      filename?: string;
      image?: { type: string; quality: number };
      html2canvas?: {
        scale?: number;
        useCORS?: boolean;
        letterRendering?: boolean;
        width?: number;
      };
      jsPDF?: {
        unit?: string;
        format?: string;
        orientation?: string;
        compress?: boolean;
      };
    }) => Promise<void>;
  }
}

// Define interfaces for type safety
interface InvoiceItem {
  id: number;
  description: string;
  quantity: number;
  rate: number;
  deliveryDate?: string; // Optional delivery date for the item
}

interface Invoice {
  id: number;
  number: string;
  customer: string;
  date: string;
  amount: number;
  status: string;
  taxRate: number;
  type: 'sales' | 'purchase';
  items: InvoiceItem[];
  address?: string;
  contactNumber?: string;
  terms?: string; // Added terms field
  notes?: string; // Added notes field
}

// Create a context for global search
const SearchContext = createContext<{
  globalSearchQuery: string;
  setGlobalSearchQuery: React.Dispatch<React.SetStateAction<string>>;
}>({
  globalSearchQuery: '',
  setGlobalSearchQuery: () => {},
});

// Custom hook to use the search context
const useSearch = () => useContext(SearchContext);

// Create Invoice Context
const InvoiceContext = createContext<{
  invoices: Invoice[];
  setInvoices: React.Dispatch<React.SetStateAction<Invoice[]>>;
}>({
  invoices: [],
  setInvoices: () => {},
});

// Custom hook to use the invoice context
const useInvoices = () => useContext(InvoiceContext);

// Create Inventory Context
const InventoryContext = createContext<{
  inventory: any[];
  setInventory: React.Dispatch<React.SetStateAction<any[]>>;
}>({
  inventory: [],
  setInventory: () => {},
});

// Custom hook to use the inventory context
const useInventory = () => useContext(InventoryContext);

// Create Accounting Context
const AccountingContext = createContext<{
  ledgerEntries: any[];
  setLedgerEntries: React.Dispatch<React.SetStateAction<any[]>>;
}>({
  ledgerEntries: [],
  setLedgerEntries: () => {},
});

// Custom hook to use the accounting context
const useAccounting = () => useContext(AccountingContext);


// Layout Components
const Sidebar = () => {
  const location = useLocation();
  const isActive = (path: string) => location.pathname === path;

  return (
    <div className="w-64 bg-gray-100 border-r border-gray-200 h-screen fixed left-0 top-0">
      <div className="p-4 border-b border-gray-200">
        <h1 className="text-2xl font-bold text-blue-600">TallyWeb - UPDATED</h1>
        <p className="text-sm text-gray-500">Business Management Suite</p>
      </div>
      <nav className="p-4 py-8 space-y-1">
        <Link to="/" className={`sidebar-item ${isActive('/') ? 'active' : ''}`}>
          <HomeIcon className="w-6 h-6" />
          <span className="font-medium">Dashboard</span>
        </Link>
        <Link to="/invoices" className={`sidebar-item ${isActive('/invoices') ? 'active' : ''}`}>
          <DocumentTextIcon className="w-6 h-6" />
          <span className="font-medium">Invoices</span>
        </Link>
        <Link to="/accounting" className={`sidebar-item ${isActive('/accounting') ? 'active' : ''}`}>
          <CurrencyDollarIcon className="w-6 h-6" />
          <span className="font-medium">Accounting</span>
        </Link>
        <Link to="/inventory" className={`sidebar-item ${isActive('/inventory') ? 'active' : ''}`}>
          <ArchiveBoxIcon className="w-6 h-6" />
          <span className="font-medium">Inventory</span>
        </Link>
        <Link to="/reports" className={`sidebar-item ${isActive('/reports') ? 'active' : ''}`}>
          <ChartBarIcon className="w-6 h-6" />
          <span className="font-medium">Reports</span>
        </Link>
        <Link to="/settings" className={`sidebar-item ${isActive('/settings') ? 'active' : ''}`}>
          <Cog6ToothIcon className="w-6 h-6" />
          <span className="font-medium">Settings</span>
        </Link>
      </nav>
    </div>
  );
};

const Header = () => {
  const { globalSearchQuery, setGlobalSearchQuery } = useSearch();
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [showResults, setShowResults] = useState(false);
  
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value;
    setGlobalSearchQuery(query);
    
    // Perform global search across different sections
    if (query.trim() === '') {
      setSearchResults([]);
      setShowResults(false);
      return;
    }
    
    // Mock search results from different sections
    const results = [
      // Invoices
      { type: 'Invoice', id: 'INV-001', title: 'ABC Corp Invoice', link: '/invoices' },
      { type: 'Invoice', id: 'INV-002', title: 'XYZ Ltd Invoice', link: '/invoices' },
      // Inventory
      { type: 'Product', id: 'SKU001', title: 'Product A', link: '/inventory' },
      { type: 'Product', id: 'SKU004', title: 'Product D', link: '/inventory' },
      // Accounting
      { type: 'Transaction', id: 'TRX-001', title: 'Sales Transaction', link: '/accounting' },
    ].filter(item => 
      item.id.toLowerCase().includes(query.toLowerCase()) || 
      item.title.toLowerCase().includes(query.toLowerCase())
    );
    
    setSearchResults(results);
    setShowResults(true);
  };
  
  const handleResultClick = () => {
    setShowResults(false);
  };

  // Close search results when clicking outside
  const searchRef = React.useRef<HTMLDivElement>(null);
  
  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
        setShowResults(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <header className="bg-blue-100 border-b border-gray-200 h-16 fixed top-0 right-0 left-64 z-10 flex items-center justify-between px-6">
      <div className="flex items-center">
        <div className="relative" ref={searchRef}>
          <input
            type="text"
            placeholder="Search across TallyWeb..."
            value={globalSearchQuery}
            onChange={handleSearch}
            className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64"
            style={{ position: 'relative', zIndex: 20 }}
          />
          
          {/* Search Results Dropdown */}
          {showResults && searchResults.length > 0 && (
            <div 
              className="absolute top-full left-0 mt-1 w-full bg-white border border-gray-200 rounded-md shadow-lg max-h-80 overflow-y-auto"
              style={{ zIndex: 30 }}
            >
              {searchResults.map((result, index) => (
                <Link 
                  key={index} 
                  to={result.link} 
                  className="block px-4 py-2 hover:bg-gray-100 border-b border-gray-100 last:border-0"
                  onClick={handleResultClick}
                >
                  <div className="flex items-center">
                    <span className="text-xs font-medium text-gray-500 bg-gray-100 rounded px-2 py-1 mr-2">
                      {result.type}
                    </span>
                    <span className="font-medium">{result.id}</span>
                    <span className="mx-2">-</span>
                    <span className="text-gray-600">{result.title}</span>
                  </div>
                </Link>
              ))}
            </div>
          )}
        </div>
        <div className="ml-4 text-green-600 font-bold">
          {globalSearchQuery ? `Searching for: "${globalSearchQuery}"` : 'Type to search across TallyWeb'}
        </div>
      </div>
      <div className="flex items-center space-x-4">
        <button className="relative p-1 rounded-full text-gray-400 hover:text-gray-500">
          <BellIcon className="w-6 h-6" />
          <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500"></span>
        </button>
      </div>
    </header>
  );
};

const Layout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 ml-64">
        <Header />
        <main className="p-6 mt-16">{children}</main>
      </div>
    </div>
  );
};

// Page Components
const Dashboard = () => {
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold">Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Total Revenue</h3>
          <p className="text-3xl font-bold mt-2">₹1,25,000</p>
          <p className="text-sm text-green-600 mt-1">↑ 12% from last month</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Outstanding Invoices</h3>
          <p className="text-3xl font-bold mt-2">₹45,000</p>
          <p className="text-sm text-red-600 mt-1">↑ 5% from last month</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Inventory Value</h3>
          <p className="text-3xl font-bold mt-2">₹78,500</p>
          <p className="text-sm text-gray-600 mt-1">→ No change from last month</p>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Recent Transactions</h3>
          <div className="space-y-3">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
                <div>
                  <p className="font-medium">Transaction #{i}</p>
                  <p className="text-sm text-gray-500">2023-10-{i < 10 ? '0' + i : i}</p>
                </div>
                <p className={`font-medium ${i % 2 === 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {i % 2 === 0 ? '+' : '-'}₹{i * 5000}
                </p>
              </div>
            ))}
          </div>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Upcoming Payments</h3>
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
                <div>
                  <p className="font-medium">Invoice #{i + 100}</p>
                  <p className="text-sm text-gray-500">Due: 2023-10-{i + 15}</p>
                </div>
                <p className="font-medium text-blue-600">₹{i * 7500}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const Invoices = () => {
  const { globalSearchQuery } = useSearch();
  const [invoiceType, setInvoiceType] = useState('sales');
  const [invoices, setInvoices] = useState([
    { id: 1, number: 'INV-001', customer: 'ABC Corp', date: '2023-10-01', amount: 15000, status: 'Paid', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Product A', quantity: 3, rate: 5000, deliveryDate: '2023-10-05' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 2, number: 'INV-002', customer: 'XYZ Ltd', date: '2023-10-05', amount: 8500, status: 'Pending', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Service B', quantity: 1, rate: 8500, deliveryDate: '2023-10-10' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 3, number: 'INV-003', customer: '123 Industries', date: '2023-10-10', amount: 12000, status: 'Overdue', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Product C', quantity: 2, rate: 6000, deliveryDate: '2023-10-15' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 4, number: 'INV-004', customer: 'Tech Solutions', date: '2023-10-15', amount: 9000, status: 'Paid', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Service D', quantity: 1, rate: 9000, deliveryDate: '2023-10-20' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 5, number: 'INV-005', customer: 'Global Traders', date: '2023-10-20', amount: 11500, status: 'Pending', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Product E', quantity: 5, rate: 2300, deliveryDate: '2023-10-25' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 6, number: 'PINV-001', customer: 'Supplier A', date: '2023-10-02', amount: 7500, status: 'Paid', taxRate: 5, type: 'purchase', items: [{ id: 1, description: 'Raw Material X', quantity: 10, rate: 750, deliveryDate: '2023-10-07' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 7, number: 'PINV-002', customer: 'Supplier B', date: '2023-10-07', amount: 12300, status: 'Pending', taxRate: 5, type: 'purchase', items: [{ id: 1, description: 'Equipment Y', quantity: 1, rate: 12300, deliveryDate: '2023-10-12' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 8, number: 'PINV-003', customer: 'Supplier C', date: '2023-10-12', amount: 5600, status: 'Overdue', taxRate: 5, type: 'purchase', items: [{ id: 1, description: 'Office Supplies', quantity: 4, rate: 1400, deliveryDate: '2023-10-17' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
  ]);
  
  const [showViewModal, setShowViewModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [currentInvoice, setCurrentInvoice] = useState<any>(null);
  const [localSearchQuery, setLocalSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('All Statuses');
  const [dateFilter, setDateFilter] = useState('Last 30 days');
  const [showDeliveryDateColumn, setShowDeliveryDateColumn] = useState(true);
  const [deliveryDateLabel, setDeliveryDateLabel] = useState('Delivery Date');
  
  // Use global search query if available, otherwise use local search
  const effectiveSearchQuery = globalSearchQuery || localSearchQuery;
  
  // Filter invoices based on search query, filters, and invoice type
  const filteredInvoices = invoices.filter(invoice => {
    // Invoice type filter
    const matchesType = invoice.type === invoiceType;
    
    // Search query filter
    const matchesSearch = effectiveSearchQuery === '' || 
      invoice.number.toLowerCase().includes(effectiveSearchQuery.toLowerCase()) ||
      invoice.customer.toLowerCase().includes(effectiveSearchQuery.toLowerCase()) ||
      invoice.status.toLowerCase().includes(effectiveSearchQuery.toLowerCase()) ||
      invoice.amount.toString().includes(effectiveSearchQuery);
    
    // Status filter
    const matchesStatus = statusFilter === 'All Statuses' || invoice.status === statusFilter;
    
    // For simplicity, we're not implementing actual date filtering logic here
    
    return matchesType && matchesSearch && matchesStatus;
  });
  
  // Update local search when global search changes
  React.useEffect(() => {
    if (globalSearchQuery) {
      setLocalSearchQuery('');
    }
  }, [globalSearchQuery]);

  const handleView = (invoice: any) => {
    setCurrentInvoice({
      ...invoice,
      address: invoice.address || 'Customer Address Line 1\nCustomer Address Line 2',
      contactNumber: invoice.contactNumber || '+971 50 123 4567',
      terms: invoice.terms || 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.',
      notes: invoice.notes || 'Thank you for your business!'
    });
    setShowViewModal(true);
  };

  const handleEdit = (invoice: any) => {
    setCurrentInvoice({
      ...invoice,
      address: invoice.address || 'Customer Address Line 1\nCustomer Address Line 2',
      contactNumber: invoice.contactNumber || '+971 50 123 4567',
      terms: invoice.terms || 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.',
      notes: invoice.notes || 'Thank you for your business!'
    });
    setShowEditModal(true);
  };

  const handleCreate = () => {
    const newInvoiceNumber = invoiceType === 'sales' 
      ? `INV-00${invoices.filter(inv => inv.type === 'sales').length + 1}`
      : `PINV-00${invoices.filter(inv => inv.type === 'purchase').length + 1}`;
    
    const today = new Date().toISOString().split('T')[0];
    
    setCurrentInvoice({
      id: invoices.length + 1,
      number: newInvoiceNumber,
      customer: '',
      date: today,
      amount: 0,
      status: 'Pending',
      address: '',
      contactNumber: '',
      taxRate: 5,
      type: invoiceType,
      items: [{ id: 1, description: 'Product/Service', quantity: 1, rate: 0, deliveryDate: today }],
      terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.',
      notes: 'Thank you for your business!'
    });
    setShowCreateModal(true);
  };

  const calculateInvoiceTotal = (items: any[]) => {
    return items.reduce((total, item) => total + (item.quantity * item.rate), 0);
  };

  const calculateTax = (amount: number, taxRate: number) => {
    return amount * (taxRate / 100);
  };

  const calculateTotal = (amount: number, taxAmount: number) => {
    return amount + taxAmount;
  };

  const handleAddItem = () => {
    if (!currentInvoice) return;
    
    const newItem = {
      id: currentInvoice.items.length + 1,
      description: 'New Item',
      quantity: 1,
      rate: 0,
      deliveryDate: currentInvoice.date // Default to invoice date
    };
    
    const updatedItems = [...currentInvoice.items, newItem];
    const newAmount = calculateInvoiceTotal(updatedItems);
    
    setCurrentInvoice({
      ...currentInvoice,
      items: updatedItems,
      amount: newAmount
    });
  };

  const handleDeleteItem = (itemId: number) => {
    if (!currentInvoice || currentInvoice.items.length <= 1) return;
    
    const updatedItems = currentInvoice.items.filter((item: InvoiceItem) => item.id !== itemId);
    const newAmount = calculateInvoiceTotal(updatedItems);
    
    setCurrentInvoice({
      ...currentInvoice,
      items: updatedItems,
      amount: newAmount
    });
  };

  const handleItemChange = (itemId: number, field: string, value: any) => {
    if (!currentInvoice) return;
    
    const updatedItems = currentInvoice.items.map((item: InvoiceItem) => {
      if (item.id === itemId) {
        const updatedItem = { ...item, [field]: value };
        
        // Recalculate item amount if quantity or rate changes
        if (field === 'quantity' || field === 'rate') {
          updatedItem.quantity = field === 'quantity' ? Number(value) : item.quantity;
          updatedItem.rate = field === 'rate' ? Number(value) : item.rate;
        }
        
        return updatedItem;
      }
      return item;
    });
    
    const newAmount = calculateInvoiceTotal(updatedItems);
    
    setCurrentInvoice({
      ...currentInvoice,
      items: updatedItems,
      amount: newAmount
    });
  };

  const handleTaxRateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentInvoice({
      ...currentInvoice,
      taxRate: Number(e.target.value)
    });
  };

  const handleSaveEdit = () => {
    if (currentInvoice) {
      setInvoices(invoices.map(inv => inv.id === currentInvoice.id ? currentInvoice : inv));
      setShowEditModal(false);
    }
  };

  const handleSaveNew = () => {
    setInvoices([...invoices, currentInvoice]);
    setShowCreateModal(false);
  };

  // Function to handle printing the invoice
  const handlePrintInvoice = () => {
    const printContent = document.getElementById('invoice-to-print');
    const originalContents = document.body.innerHTML;
    
    if (printContent) {
      const printStyles = `
        <style>
          @page { size: A4; margin: 1cm; }
          body { font-family: Arial, sans-serif; }
          .invoice-header { display: flex; justify-content: space-between; margin-bottom: 30px; }
          .invoice-header-left { float: left; }
          .invoice-header-right { float: right; text-align: right; }
          table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          th, td { border: 1px solid #ddd; padding: 8px; }
          th { background-color: #f2f2f2; text-align: left; }
          .text-right { text-align: right; }
          .footer { margin-top: 30px; }
          .clearfix::after { content: ""; clear: both; display: table; }
        </style>
      `;
      
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write('<html><head><title>Print Invoice</title>');
        printWindow.document.write(printStyles);
        printWindow.document.write('</head><body>');
        printWindow.document.write(printContent.innerHTML);
        printWindow.document.write('</body></html>');
        printWindow.document.close();
        printWindow.focus();
        
        // Print after a short delay to ensure content is loaded
        setTimeout(() => {
          printWindow.print();
          printWindow.close();
        }, 250);
      }
    }
  };

  // Function to generate and download PDF
  const handleDownloadPDF = () => {
    const printContent = document.getElementById('invoice-to-print');
    
    if (printContent && currentInvoice) {
      // Add a temporary class for better PDF rendering
      printContent.classList.add('pdf-export');
      
      // Apply specific styles for PDF export
      const styleElement = document.createElement('style');
      styleElement.textContent = `
        .pdf-export {
          width: 100%;
          max-width: 800px;
          margin: 0 auto;
          padding: 10mm;
          font-family: Arial, sans-serif;
          font-size: 10pt;
        }
        .pdf-export h1 {
          font-size: 18pt;
        }
        .pdf-export h2 {
          font-size: 16pt;
        }
        .pdf-export h3 {
          font-size: 12pt;
        }
        .pdf-export table {
          width: 100%;
          border-collapse: collapse;
          margin: 10px 0;
          font-size: 9pt;
        }
        .pdf-export th, .pdf-export td {
          border: 1px solid #ddd;
          padding: 4px;
          text-align: left;
        }
        .pdf-export th {
          background-color: #f2f2f2;
        }
        .pdf-export .text-right {
          text-align: right;
        }
        .pdf-export .invoice-header {
          display: flex;
          justify-content: space-between;
          margin-bottom: 20px;
        }
        .pdf-export .invoice-header-left {
          width: 50%;
          float: left;
        }
        .pdf-export .invoice-header-right {
          width: 50%;
          float: right;
          text-align: right;
        }
        .pdf-export .clearfix::after {
          content: "";
          clear: both;
          display: table;
        }
      `;
      document.head.appendChild(styleElement);
      
      // Use html2pdf library for better formatting
      if (window.html2pdf) {
        const opt = {
          margin: [10, 10, 10, 10], // top, right, bottom, left margins in mm
          filename: `Invoice-${currentInvoice.number}.pdf`,
          image: { type: 'jpeg', quality: 0.98 },
          html2canvas: { 
            scale: 2, 
            useCORS: true,
            letterRendering: true,
            width: 800 // Fixed width to ensure consistent scaling
          },
          jsPDF: { 
            unit: 'mm', 
            format: 'a4', 
            orientation: 'portrait',
            compress: true
          }
        };
        
        window.html2pdf(printContent, opt)
          .then(() => {
            // Clean up
            printContent.classList.remove('pdf-export');
            document.head.removeChild(styleElement);
          })
          .catch(error => {
            console.error('Error generating PDF:', error);
            alert('Could not generate PDF. Please try again.');
            printContent.classList.remove('pdf-export');
            document.head.removeChild(styleElement);
          });
      } else {
        alert('PDF generation library not loaded. Please try again later.');
        printContent.classList.remove('pdf-export');
        document.head.removeChild(styleElement);
      }
    } else {
      alert('Could not generate PDF. Please try again.');
    }
  };

  // Add script tags for PDF generation libraries
  React.useEffect(() => {
    // Add html2pdf script
    const html2pdfScript = document.createElement('script');
    html2pdfScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js';
    html2pdfScript.async = true;
    document.body.appendChild(html2pdfScript);
    
    // Cleanup function
    return () => {
      document.body.removeChild(html2pdfScript);
    };
  }, []);

  const handleDelete = (invoice: any) => {
    setCurrentInvoice(invoice);
    setShowDeleteConfirmation(true);
  };

  const confirmDelete = () => {
    setInvoices(invoices.filter(inv => inv.id !== currentInvoice.id));
    setShowDeleteConfirmation(false);
    setCurrentInvoice(null);
  };

  // Add functions to calculate summary metrics
  const calculateTotalAmount = (type: 'sales' | 'purchase') => {
    return invoices
      .filter(inv => inv.type === type)
      .reduce((total, inv) => total + inv.amount, 0);
  };

  const calculatePendingAmount = (type: 'sales' | 'purchase') => {
    return invoices
      .filter(inv => inv.type === type && inv.status === 'Pending')
      .reduce((total, inv) => total + inv.amount, 0);
  };

  const calculateOverdueAmount = (type: 'sales' | 'purchase') => {
    return invoices
      .filter(inv => inv.type === type && inv.status === 'Overdue')
      .reduce((total, inv) => total + inv.amount, 0);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Invoices</h1>
          <div className="mt-2 flex space-x-2">
            <button 
              className={`px-4 py-2 rounded-md font-medium ${
                invoiceType === 'sales' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
              onClick={() => setInvoiceType('sales')}
            >
              Sales Invoice
            </button>
            <button 
              className={`px-4 py-2 rounded-md font-medium ${
                invoiceType === 'purchase' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
              onClick={() => setInvoiceType('purchase')}
            >
              Purchase Invoice
            </button>
          </div>
        </div>
        <button className="btn-primary" onClick={handleCreate}>
          Create {invoiceType === 'sales' ? 'Sales' : 'Purchase'} Invoice
        </button>
      </div>

      {/* Add Summary Section */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">
            Total {invoiceType === 'sales' ? 'Sales' : 'Purchases'}
          </h3>
          <p className="text-3xl font-bold mt-2">AED {calculateTotalAmount(invoiceType as 'sales' | 'purchase').toLocaleString()}</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">
            Pending Amount
          </h3>
          <p className="text-3xl font-bold mt-2 text-yellow-600">AED {calculatePendingAmount(invoiceType as 'sales' | 'purchase').toLocaleString()}</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">
            Overdue Amount
          </h3>
          <p className="text-3xl font-bold mt-2 text-red-600">AED {calculateOverdueAmount(invoiceType as 'sales' | 'purchase').toLocaleString()}</p>
        </div>
      </div>

      <div className="card">
        <div className="flex justify-between items-center mb-4">
          <div className="relative">
            <input
              type="text"
              placeholder="Search invoices..."
              value={localSearchQuery}
              onChange={(e) => setLocalSearchQuery(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              style={{ position: 'relative', zIndex: 1 }}
            />
          </div>
          <div className="flex space-x-2">
            <select 
              className="input-field" 
              value={statusFilter} 
              onChange={(e) => setStatusFilter(e.target.value)}
              style={{ position: 'relative', zIndex: 1 }}
            >
              <option>All Statuses</option>
              <option>Paid</option>
              <option>Pending</option>
              <option>Overdue</option>
            </select>
            <select 
              className="input-field" 
              value={dateFilter} 
              onChange={(e) => setDateFilter(e.target.value)}
              style={{ position: 'relative', zIndex: 1 }}
            >
              <option>Last 30 days</option>
              <option>Last 90 days</option>
              <option>This year</option>
              <option>All time</option>
            </select>
          </div>
        </div>
        
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                <th>Invoice #</th>
                <th>{invoiceType === 'sales' ? 'Customer' : 'Supplier'}</th>
                <th>Date</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredInvoices.map((invoice) => (
                <tr key={invoice.id}>
                  <td>{invoice.number}</td>
                  <td>{invoice.customer}</td>
                  <td>{invoice.date}</td>
                  <td>AED {invoice.amount.toLocaleString()}</td>
                  <td>
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        invoice.status === 'Paid'
                          ? 'bg-green-100 text-green-800'
                          : invoice.status === 'Pending'
                          ? 'bg-yellow-100 text-yellow-800'
                          : 'bg-red-100 text-red-800'
                      }`}
                    >
                      {invoice.status}
                    </span>
                  </td>
                  <td>
                    <div className="flex space-x-2">
                      <button 
                        className="text-blue-600 hover:text-blue-800"
                        onClick={() => handleView(invoice)}
                      >
                        View
                      </button>
                      <button 
                        className="text-gray-600 hover:text-gray-800"
                        onClick={() => handleEdit(invoice)}
                      >
                        Edit
                      </button>
                      <button 
                        className="text-red-600 hover:text-red-800"
                        onClick={() => handleDelete(invoice)}
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* View Invoice Modal */}
      {showViewModal && currentInvoice && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-3xl relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowViewModal(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-8" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              {/* Invoice content for printing/downloading */}
              <div id="invoice-to-print" className="p-6">
                {/* Invoice Header */}
                <div className="clearfix mb-8 border-b pb-6">
                  <div className="invoice-header-left float-left w-1/2">
                    <h1 className="text-2xl font-bold text-blue-600">TallyWeb</h1>
                    <p className="text-sm text-gray-500">Business Management Suite</p>
                    <p className="mt-2 text-sm">123 Business Park, Main Street</p>
                    <p className="text-sm">Dubai, United Arab Emirates</p>
                    <p className="text-sm">TRN: 100123456700003</p>
                  </div>
                  <div className="invoice-header-right float-right w-1/2 text-right">
                    <h2 className="text-xl font-bold">
                      {currentInvoice.type === 'sales' ? 'SALES INVOICE' : 'PURCHASE INVOICE'}
                    </h2>
                    <div className="mt-2 p-2 bg-gray-50 rounded-md">
                      <p className="font-medium text-sm">Invoice Number: <span className="text-gray-700">{currentInvoice.number}</span></p>
                      <p className="font-medium text-sm">Date: <span className="text-gray-700">{currentInvoice.date}</span></p>
                      <p className="font-medium text-sm">Status: 
                        <span className={`ml-2 px-2 py-0.5 rounded-full text-xs font-medium ${
                          currentInvoice.status === 'Paid'
                            ? 'bg-green-100 text-green-800'
                            : currentInvoice.status === 'Pending'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-red-100 text-red-800'
                        }`}>
                          {currentInvoice.status}
                        </span>
                      </p>
                    </div>
                  </div>
                </div>
                
                {/* Customer Information */}
                <div className="mb-6">
                  <h3 className="text-base font-medium text-gray-700 mb-2">
                    {currentInvoice.type === 'sales' ? 'Bill To:' : 'Supplier:'}
                  </h3>
                  <p className="font-medium text-sm">{currentInvoice.customer}</p>
                  <p className="whitespace-pre-line text-sm">{currentInvoice.address || 'Customer Address Line 1\nCustomer Address Line 2'}</p>
                  <p className="text-sm">{currentInvoice.contactNumber || '+971 50 123 4567'}</p>
                </div>
                
                {/* Invoice Items */}
                <div className="mb-6">
                  <table className="w-full border-collapse text-sm">
                    <thead>
                      <tr className="bg-gray-50">
                        <th className="py-1 px-2 text-center border border-gray-200" style={{width: '5%'}}>No.</th>
                        {showDeliveryDateColumn && (
                          <th className="py-1 px-2 text-center border border-gray-200" style={{width: '15%'}}>{deliveryDateLabel}</th>
                        )}
                        <th className="py-1 px-2 text-left border border-gray-200">Item</th>
                        <th className="py-1 px-2 text-right border border-gray-200" style={{width: '15%'}}>Quantity</th>
                        <th className="py-1 px-2 text-right border border-gray-200" style={{width: '20%'}}>Rate</th>
                        <th className="py-1 px-2 text-right border border-gray-200" style={{width: '15%'}}>Amount</th>
                      </tr>
                    </thead>
                    <tbody>
                      {currentInvoice.items.map((item: InvoiceItem, index: number) => (
                        <tr key={item.id}>
                          <td className="py-1 px-2 text-center border border-gray-200">{index + 1}</td>
                          {showDeliveryDateColumn && (
                            <td className="py-1 px-2 text-center border border-gray-200">{item.deliveryDate || currentInvoice.date}</td>
                          )}
                          <td className="py-1 px-2 border border-gray-200">{item.description}</td>
                          <td className="py-1 px-2 text-right border border-gray-200">{item.quantity}</td>
                          <td className="py-1 px-2 text-right border border-gray-200">AED {item.rate.toLocaleString()}</td>
                          <td className="py-1 px-2 text-right border border-gray-200">AED {(item.quantity * item.rate).toLocaleString()}</td>
                        </tr>
                      ))}
                    </tbody>
                    <tfoot>
                      {/* Add empty row for spacing */}
                      <tr>
                        <td colSpan={showDeliveryDateColumn ? 6 : 5} className="border-0" style={{ height: '15px' }}></td>
                      </tr>
                      <tr>
                        <td colSpan={showDeliveryDateColumn ? 4 : 3} className="border border-gray-200"></td>
                        <td className="py-1 px-2 text-right font-bold border border-gray-200">Subtotal</td>
                        <td className="py-1 px-2 text-right font-bold border border-gray-200">AED {currentInvoice.amount.toLocaleString()}</td>
                      </tr>
                      <tr>
                        <td colSpan={showDeliveryDateColumn ? 4 : 3} className="border border-gray-200"></td>
                        <td className="py-1 px-2 text-right font-bold border border-gray-200">VAT ({currentInvoice.taxRate}%)</td>
                        <td className="py-1 px-2 text-right font-bold border border-gray-200">AED {calculateTax(currentInvoice.amount, currentInvoice.taxRate).toLocaleString(undefined, {maximumFractionDigits: 2})}</td>
                      </tr>
                      <tr className="bg-gray-50">
                        <td colSpan={showDeliveryDateColumn ? 4 : 3} className="border border-gray-200"></td>
                        <td className="py-1 px-2 text-right font-bold border border-gray-200">Total</td>
                        <td className="py-1 px-2 text-right font-bold border border-gray-200">AED {calculateTotal(currentInvoice.amount, calculateTax(currentInvoice.amount, currentInvoice.taxRate)).toLocaleString(undefined, {maximumFractionDigits: 2})}</td>
                      </tr>
                    </tfoot>
                  </table>
                </div>
                
                {/* Add empty space with invisible table rows that will render in PDF */}
                <table className="w-full border-collapse">
                  <tbody>
                    <tr><td style={{ height: '40px', border: 'none', backgroundColor: 'white' }}></td></tr>
                    <tr><td style={{ height: '40px', border: 'none', backgroundColor: 'white' }}></td></tr>
                    <tr><td style={{ height: '40px', border: 'none', backgroundColor: 'white' }}></td></tr>
                  </tbody>
                </table>
                
                {/* Terms and Notes */}
                <div className="mb-6">
                  <h3 className="text-base font-medium text-gray-700 mb-2">Terms & Notes</h3>
                  <p className="text-gray-600 text-sm">{currentInvoice.terms || 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.'}</p>
                  <p className="text-gray-600 text-sm mt-2">{currentInvoice.notes || 'Thank you for your business!'}</p>
                </div>
              </div>
              
              {/* Footer Actions */}
              <div className="flex justify-end space-x-4 mt-8 pt-6 border-t">
                <button 
                  className="btn-secondary"
                  onClick={() => setShowViewModal(false)}
                >
                  Close
                </button>
                <button 
                  className="btn-primary flex items-center"
                  onClick={handleDownloadPDF}
                >
                  <svg className="w-6 h-6 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                  </svg>
                  Download PDF
                </button>
                <button 
                  className="btn-primary"
                  onClick={handlePrintInvoice}
                >
                  <svg className="w-6 h-6 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                  </svg>
                  Print Invoice
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Invoice Modal */}
      {showEditModal && currentInvoice && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-3xl relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowEditModal(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-8" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              <h2 className="text-2xl font-bold mb-6 border-b pb-4">
                Edit {currentInvoice.type === 'sales' ? 'Sales' : 'Purchase'} Invoice
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h3 className="text-lg font-medium text-gray-700 mb-4">Invoice Information</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Invoice Number</label>
                      <input 
                        type="text" 
                        className="input-field" 
                        value={currentInvoice.number}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, number: e.target.value})}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                      <input 
                        type="date" 
                        className="input-field" 
                        value={currentInvoice.date}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, date: e.target.value})}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                      <select 
                        className="input-field"
                        value={currentInvoice.status}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, status: e.target.value})}
                      >
                        <option>Paid</option>
                        <option>Pending</option>
                        <option>Overdue</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium text-gray-700 mb-4">
                    {currentInvoice.type === 'sales' ? 'Customer Information' : 'Supplier Information'}
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        {currentInvoice.type === 'sales' ? 'Customer Name' : 'Supplier Name'}
                      </label>
                      <input 
                        type="text" 
                        className="input-field" 
                        value={currentInvoice.customer}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, customer: e.target.value})}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                      <textarea 
                        className="input-field" 
                        rows={3}
                        placeholder="Enter customer address"
                        value={currentInvoice.address || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, address: e.target.value})}
                      ></textarea>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Contact Number</label>
                      <input 
                        type="text" 
                        className="input-field" 
                        placeholder="Enter contact number"
                        value={currentInvoice.contactNumber || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, contactNumber: e.target.value})}
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Terms
                      </label>
                      <textarea
                        className="input-field"
                        placeholder="Enter payment terms"
                        value={currentInvoice.terms || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, terms: e.target.value})}
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Notes
                      </label>
                      <textarea
                        className="input-field"
                        placeholder="Enter additional notes"
                        value={currentInvoice.notes || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, notes: e.target.value})}
                      />
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-700 mb-4">Invoice Items</h3>
                <div className="flex items-center mb-2">
                  <div className="flex items-center mr-4">
                    <input
                      type="checkbox"
                      id="showDeliveryDate"
                      className="mr-2"
                      checked={showDeliveryDateColumn}
                      onChange={(e) => setShowDeliveryDateColumn(e.target.checked)}
                    />
                    <label htmlFor="showDeliveryDate" className="text-sm">Show Date Column</label>
                  </div>
                  {showDeliveryDateColumn && (
                    <div className="flex items-center">
                      <label htmlFor="deliveryDateLabel" className="text-sm mr-2">Date Column Label:</label>
                      <input
                        type="text"
                        id="deliveryDateLabel"
                        className="border border-gray-300 rounded px-2 py-1 text-sm"
                        value={deliveryDateLabel}
                        onChange={(e) => setDeliveryDateLabel(e.target.value)}
                        placeholder="Enter column label"
                      />
                    </div>
                  )}
                </div>
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="bg-gray-50">
                        <th className="py-2 px-4 text-center border border-gray-200" style={{width: '5%'}}>No.</th>
                        {showDeliveryDateColumn && (
                          <th className="py-2 px-4 text-center border border-gray-200" style={{width: '15%'}}>{deliveryDateLabel}</th>
                        )}
                        <th className="py-2 px-4 text-left border border-gray-200">Item</th>
                        <th className="py-2 px-4 text-right border border-gray-200">Quantity</th>
                        <th className="py-2 px-4 text-right border border-gray-200">Rate</th>
                        <th className="py-2 px-4 text-right border border-gray-200">Amount</th>
                        <th className="py-2 px-4 text-center border border-gray-200">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {currentInvoice.items.map((item: InvoiceItem, index: number) => (
                        <tr key={item.id}>
                          <td className="py-2 px-4 text-center border border-gray-200">
                            {index + 1}
                          </td>
                          {showDeliveryDateColumn && (
                            <td className="py-2 px-4 text-center border border-gray-200">
                              <input 
                                type="date" 
                                className="w-full border-0 focus:ring-0 text-center" 
                                value={item.deliveryDate || currentInvoice.date}
                                onChange={(e) => handleItemChange(item.id, 'deliveryDate', e.target.value)}
                              />
                            </td>
                          )}
                          <td className="py-2 px-4 border border-gray-200">
                            <input 
                              type="text" 
                              className="w-full border-0 focus:ring-0" 
                              value={item.description}
                              onChange={(e) => handleItemChange(item.id, 'description', e.target.value)}
                            />
                          </td>
                          <td className="py-2 px-4 text-right border border-gray-200">
                            <input 
                              type="number" 
                              className="w-full border-0 focus:ring-0 text-right" 
                              value={item.quantity}
                              onChange={(e) => handleItemChange(item.id, 'quantity', Number(e.target.value))}
                              min="1"
                            />
                          </td>
                          <td className="py-2 px-4 text-right border border-gray-200">
                            <input 
                              type="number" 
                              className="w-full border-0 focus:ring-0 text-right" 
                              value={item.rate}
                              onChange={(e) => handleItemChange(item.id, 'rate', Number(e.target.value))}
                              min="0"
                            />
                          </td>
                          <td className="py-2 px-4 text-right border border-gray-200">
                            AED {(item.quantity * item.rate).toLocaleString()}
                          </td>
                          <td className="py-2 px-4 text-center border border-gray-200">
                            <button 
                              className="text-red-600 hover:text-red-800"
                              onClick={() => handleDeleteItem(item.id)}
                              disabled={currentInvoice.items.length <= 1}
                            >
                              <svg className="w-6 h-6 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <div className="mt-2">
                    <button 
                      className="text-blue-600 hover:text-blue-800 flex items-center"
                      onClick={handleAddItem}
                    >
                      <svg className="w-6 h-6 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                      Add Item
                    </button>
                  </div>
                </div>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-700 mb-4">Tax Settings</h3>
                <div className="flex items-center space-x-4">
                  <label className="text-sm font-medium text-gray-700">VAT Rate (%)</label>
                  <input 
                    type="number" 
                    className="input-field w-24" 
                    value={currentInvoice.taxRate}
                    onChange={handleTaxRateChange}
                    min="0"
                    max="100"
                    step="0.01"
                  />
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm text-gray-500">Total Amount: AED {currentInvoice.amount.toLocaleString()}</p>
                  <p className="text-sm text-gray-500">VAT ({currentInvoice.taxRate}%): AED {calculateTax(currentInvoice.amount, currentInvoice.taxRate).toLocaleString(undefined, {maximumFractionDigits: 2})}</p>
                  <p className="text-sm font-medium">Grand Total: AED {calculateTotal(currentInvoice.amount, calculateTax(currentInvoice.amount, currentInvoice.taxRate)).toLocaleString(undefined, {maximumFractionDigits: 2})}</p>
                </div>
                <div className="flex space-x-4">
                  <button 
                    className="btn-secondary"
                    onClick={() => setShowEditModal(false)}
                  >
                    Cancel
                  </button>
                  <button 
                    className="btn-primary"
                    onClick={handleSaveEdit}
                  >
                    Save Invoice
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Create Invoice Modal */}
      {showCreateModal && currentInvoice && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-3xl relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowCreateModal(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-8" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              <h2 className="text-2xl font-bold mb-6 border-b pb-4">
                Create New {currentInvoice.type === 'sales' ? 'Sales' : 'Purchase'} Invoice
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h3 className="text-lg font-medium text-gray-700 mb-4">Invoice Information</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Invoice Number</label>
                      <input 
                        type="text" 
                        className="input-field" 
                        value={currentInvoice.number}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, number: e.target.value})}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                      <input 
                        type="date" 
                        className="input-field" 
                        value={currentInvoice.date}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, date: e.target.value})}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                      <select 
                        className="input-field"
                        value={currentInvoice.status}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, status: e.target.value})}
                      >
                        <option>Paid</option>
                        <option>Pending</option>
                        <option>Overdue</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium text-gray-700 mb-4">
                    {currentInvoice.type === 'sales' ? 'Customer Information' : 'Supplier Information'}
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        {currentInvoice.type === 'sales' ? 'Customer Name' : 'Supplier Name'}
                      </label>
                      <input 
                        type="text" 
                        className="input-field" 
                        value={currentInvoice.customer}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, customer: e.target.value})}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                      <textarea 
                        className="input-field" 
                        rows={3}
                        placeholder="Enter customer address"
                        value={currentInvoice.address || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, address: e.target.value})}
                      ></textarea>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Contact Number</label>
                      <input 
                        type="text" 
                        className="input-field" 
                        placeholder="Enter contact number"
                        value={currentInvoice.contactNumber || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, contactNumber: e.target.value})}
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Terms
                      </label>
                      <textarea
                        className="input-field"
                        placeholder="Enter payment terms"
                        value={currentInvoice.terms || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, terms: e.target.value})}
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Notes
                      </label>
                      <textarea
                        className="input-field"
                        placeholder="Enter additional notes"
                        value={currentInvoice.notes || ''}
                        onChange={(e) => setCurrentInvoice({...currentInvoice, notes: e.target.value})}
                      />
                    </div>
                  </div>
                </div>
              </div>

              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-700 mb-4">Invoice Items</h3>
                <div className="flex items-center mb-2">
                  <div className="flex items-center mr-4">
                    <input
                      type="checkbox"
                      id="showDeliveryDate"
                      className="mr-2"
                      checked={showDeliveryDateColumn}
                      onChange={(e) => setShowDeliveryDateColumn(e.target.checked)}
                    />
                    <label htmlFor="showDeliveryDate" className="text-sm">Show Date Column</label>
                  </div>
                  {showDeliveryDateColumn && (
                    <div className="flex items-center">
                      <label htmlFor="deliveryDateLabel" className="text-sm mr-2">Date Column Label:</label>
                      <input
                        type="text"
                        id="deliveryDateLabel"
                        className="border border-gray-300 rounded px-2 py-1 text-sm"
                        value={deliveryDateLabel}
                        onChange={(e) => setDeliveryDateLabel(e.target.value)}
                        placeholder="Enter column label"
                      />
                    </div>
                  )}
                </div>
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="bg-gray-50">
                        <th className="py-2 px-4 text-center border border-gray-200" style={{width: '5%'}}>No.</th>
                        {showDeliveryDateColumn && (
                          <th className="py-2 px-4 text-center border border-gray-200" style={{width: '15%'}}>{deliveryDateLabel}</th>
                        )}
                        <th className="py-2 px-4 text-left border border-gray-200">Item</th>
                        <th className="py-2 px-4 text-right border border-gray-200">Quantity</th>
                        <th className="py-2 px-4 text-right border border-gray-200">Rate</th>
                        <th className="py-2 px-4 text-right border border-gray-200">Amount</th>
                        <th className="py-2 px-4 text-center border border-gray-200">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {currentInvoice.items.map((item: InvoiceItem, index: number) => (
                        <tr key={item.id}>
                          <td className="py-2 px-4 text-center border border-gray-200">
                            {index + 1}
                          </td>
                          {showDeliveryDateColumn && (
                            <td className="py-2 px-4 text-center border border-gray-200">
                              <input 
                                type="date" 
                                className="w-full border-0 focus:ring-0 text-center" 
                                value={item.deliveryDate || currentInvoice.date}
                                onChange={(e) => handleItemChange(item.id, 'deliveryDate', e.target.value)}
                              />
                            </td>
                          )}
                          <td className="py-2 px-4 border border-gray-200">
                            <input 
                              type="text" 
                              className="w-full border-0 focus:ring-0" 
                              value={item.description}
                              onChange={(e) => handleItemChange(item.id, 'description', e.target.value)}
                            />
                          </td>
                          <td className="py-2 px-4 text-right border border-gray-200">
                            <input 
                              type="number" 
                              className="w-full border-0 focus:ring-0 text-right" 
                              value={item.quantity}
                              onChange={(e) => handleItemChange(item.id, 'quantity', Number(e.target.value))}
                              min="1"
                            />
                          </td>
                          <td className="py-2 px-4 text-right border border-gray-200">
                            <input 
                              type="number" 
                              className="w-full border-0 focus:ring-0 text-right" 
                              value={item.rate}
                              onChange={(e) => handleItemChange(item.id, 'rate', Number(e.target.value))}
                              min="0"
                            />
                          </td>
                          <td className="py-2 px-4 text-right border border-gray-200">
                            AED {(item.quantity * item.rate).toLocaleString()}
                          </td>
                          <td className="py-2 px-4 text-center border border-gray-200">
                            <button 
                              className="text-red-600 hover:text-red-800"
                              onClick={() => handleDeleteItem(item.id)}
                              disabled={currentInvoice.items.length <= 1}
                            >
                              <svg className="w-6 h-6 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <div className="mt-2">
                    <button 
                      className="text-blue-600 hover:text-blue-800 flex items-center"
                      onClick={handleAddItem}
                    >
                      <svg className="w-6 h-6 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                      Add Item
                    </button>
                  </div>
                </div>
              </div>               
              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-700 mb-4">Tax Settings</h3>
                <div className="flex items-center space-x-4">
                  <label className="text-sm font-medium text-gray-700">VAT Rate (%)</label>
                  <input 
                    type="number" 
                    className="input-field w-24" 
                    value={currentInvoice.taxRate}
                    onChange={handleTaxRateChange}
                    min="0"
                    max="100"
                    step="0.01"
                  />
                </div>
              </div>
              
              {/* Add Terms & Notes section */}
              <div className="mt-6">
                <h3 className="text-lg font-medium text-gray-700 mb-4">Terms & Notes</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Terms</label>
                    <textarea 
                      className="input-field" 
                      rows={2}
                      placeholder="Enter payment terms"
                      value={currentInvoice.terms || ''}
                      onChange={(e) => setCurrentInvoice({...currentInvoice, terms: e.target.value})}
                    ></textarea>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea 
                      className="input-field" 
                      rows={2}
                      placeholder="Enter additional notes"
                      value={currentInvoice.notes || ''}
                      onChange={(e) => setCurrentInvoice({...currentInvoice, notes: e.target.value})}
                    ></textarea>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm text-gray-500">Total Amount: AED {currentInvoice.amount.toLocaleString()}</p>
                  <p className="text-sm text-gray-500">VAT ({currentInvoice.taxRate}%): AED {calculateTax(currentInvoice.amount, currentInvoice.taxRate).toLocaleString(undefined, {maximumFractionDigits: 2})}</p>
                  <p className="text-sm font-medium">Grand Total: AED {calculateTotal(currentInvoice.amount, calculateTax(currentInvoice.amount, currentInvoice.taxRate)).toLocaleString(undefined, {maximumFractionDigits: 2})}</p>
                </div>
                <div className="flex space-x-4">
                  <button 
                    className="btn-secondary"
                    onClick={() => setShowCreateModal(false)}
                  >
                    Cancel
                  </button>
                  <button 
                    className="btn-primary"
                    onClick={handleSaveNew}
                  >
                    Create Invoice
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteConfirmation && currentInvoice && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-md relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowDeleteConfirmation(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-6" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              <h2 className="text-xl font-bold mb-4 border-b pb-3">Confirm Delete</h2>
              <p className="mb-6">Are you sure you want to delete <span className="font-medium">{currentInvoice.number}</span>? This action cannot be undone.</p>
              
              <div className="flex justify-end space-x-4">
                <button 
                  className="btn-secondary"
                  onClick={() => setShowDeleteConfirmation(false)}
                >
                  Cancel
                </button>
                <button 
                  className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md"
                  onClick={confirmDelete}
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const Accounting = () => {
  const [ledgerEntries, setLedgerEntries] = useState([
    { id: 1, date: '2023-10-01', description: 'Initial Balance', debit: 0, credit: 100000, balance: 100000 },
    { id: 2, date: '2023-10-05', description: 'Office Rent', debit: 15000, credit: 0, balance: 85000 },
    { id: 3, date: '2023-10-10', description: 'Sales Revenue', debit: 0, credit: 35000, balance: 120000 },
    { id: 4, date: '2023-10-15', description: 'Utility Bills', debit: 5000, credit: 0, balance: 115000 },
    { id: 5, date: '2023-10-20', description: 'Equipment Purchase', debit: 25000, credit: 0, balance: 90000 },
  ]);
  
  // Add state for the transaction modal and edit/delete functionality
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState(null);
  const [newTransaction, setNewTransaction] = useState({
    date: new Date().toISOString().split('T')[0],
    description: '',
    debit: 0,
    credit: 0
  });

  // Function to handle editing a transaction
  const handleEditTransaction = (transaction) => {
    setSelectedTransaction(transaction);
    setNewTransaction({
      date: transaction.date,
      description: transaction.description,
      debit: transaction.debit,
      credit: transaction.credit
    });
    setShowEditModal(true);
  };

  // Function to handle deleting a transaction
  const handleDeleteTransaction = (transaction) => {
    setSelectedTransaction(transaction);
    setShowDeleteModal(true);
  };

  // Function to save edited transaction
  const handleSaveEdit = () => {
    if (!newTransaction.description) {
      alert('Please enter a description');
      return;
    }
    
    if (newTransaction.debit === 0 && newTransaction.credit === 0) {
      alert('Please enter either a debit or credit amount');
      return;
    }

    // Recalculate balances for all entries after the edited entry
    const updatedEntries = ledgerEntries.map(entry => {
      if (entry.id === selectedTransaction.id) {
        return {
          ...entry,
          date: newTransaction.date,
          description: newTransaction.description,
          debit: newTransaction.debit,
          credit: newTransaction.credit
        };
      }
      return entry;
    });

    // Recalculate all balances
    let runningBalance = 0;
    const finalUpdatedEntries = updatedEntries.map(entry => {
      runningBalance = runningBalance + entry.credit - entry.debit;
      return { ...entry, balance: runningBalance };
    });

    setLedgerEntries(finalUpdatedEntries);
    setShowEditModal(false);
    setSelectedTransaction(null);
    setNewTransaction({
      date: new Date().toISOString().split('T')[0],
      description: '',
      debit: 0,
      credit: 0
    });
  };

  // Function to confirm delete
  const handleConfirmDelete = () => {
    // Remove the selected transaction
    const updatedEntries = ledgerEntries.filter(entry => entry.id !== selectedTransaction.id);
    
    // Recalculate all balances
    let runningBalance = 0;
    const finalUpdatedEntries = updatedEntries.map(entry => {
      runningBalance = runningBalance + entry.credit - entry.debit;
      return { ...entry, balance: runningBalance };
    });

    setLedgerEntries(finalUpdatedEntries);
    setShowDeleteModal(false);
    setSelectedTransaction(null);
  };

  // Function to handle adding a new transaction
  const handleAddTransaction = () => {
    setShowAddModal(true);
  };

  // Function to save a new transaction
  const handleSaveTransaction = () => {
    // Validate the transaction
    if (!newTransaction.description) {
      alert('Please enter a description');
      return;
    }
    
    if (newTransaction.debit === 0 && newTransaction.credit === 0) {
      alert('Please enter either a debit or credit amount');
      return;
    }
    
    // Calculate the new balance
    const lastEntry = ledgerEntries[ledgerEntries.length - 1];
    const newBalance = lastEntry.balance + newTransaction.credit - newTransaction.debit;
    
    // Create the new entry
    const newEntry = {
      id: ledgerEntries.length + 1,
      date: newTransaction.date,
      description: newTransaction.description,
      debit: newTransaction.debit,
      credit: newTransaction.credit,
      balance: newBalance
    };
    
    // Add the new entry to the ledger
    setLedgerEntries([...ledgerEntries, newEntry]);
    
    // Reset the form and close the modal
    setNewTransaction({
      date: new Date().toISOString().split('T')[0],
      description: '',
      debit: 0,
      credit: 0
    });
    setShowAddModal(false);
  };

  // Function to handle exporting the ledger
  const handleExport = () => {
    // Format date to ensure it displays correctly in Excel
    const formatDate = (dateString) => {
      const date = new Date(dateString);
      return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
    };
    
    // Create CSV content with headers
    let csvContent = "Date,Description,Debit (AED),Credit (AED),Balance (AED)\n";
    
    // Add all ledger entries
    ledgerEntries.forEach(entry => {
      csvContent += `${formatDate(entry.date)},${entry.description},${entry.debit},${entry.credit},${entry.balance}\n`;
    });
    
    // Add empty row before totals
    csvContent += "\n";
    
    // Add totals row
    const totalIncome = ledgerEntries.reduce((sum, entry) => sum + entry.credit, 0);
    const totalExpenses = ledgerEntries.reduce((sum, entry) => sum + entry.debit, 0);
    const currentBalance = ledgerEntries[ledgerEntries.length - 1].balance;
    
    csvContent += `Total,,${totalExpenses},${totalIncome},${currentBalance}\n`;
    
    // Create a blob and download link
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'general_ledger.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Calculate totals
  const totalIncome = ledgerEntries.reduce((sum, entry) => sum + entry.credit, 0);
  const totalExpenses = ledgerEntries.reduce((sum, entry) => sum + entry.debit, 0);
  const currentBalance = ledgerEntries[ledgerEntries.length - 1].balance;

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Accounting</h1>
        <div className="flex space-x-2">
          <button className="btn-primary" onClick={handleAddTransaction}>Add Transaction</button>
          <button className="btn-secondary" onClick={handleExport}>Export</button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Current Balance</h3>
          <p className="text-3xl font-bold mt-2">AED {currentBalance.toLocaleString()}</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Total Income</h3>
          <p className="text-3xl font-bold mt-2 text-green-600">AED {totalIncome.toLocaleString()}</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Total Expenses</h3>
          <p className="text-3xl font-bold mt-2 text-red-600">AED {totalExpenses.toLocaleString()}</p>
        </div>
      </div>
      
      <div className="card">
        <h3 className="text-lg font-medium text-gray-700 mb-4">General Ledger</h3>
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Debit (AED)</th>
                <th>Credit (AED)</th>
                <th>Balance (AED)</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {ledgerEntries.map((entry) => (
                <tr key={entry.id}>
                  <td>{entry.date}</td>
                  <td>{entry.description}</td>
                  <td>{entry.debit > 0 ? entry.debit.toLocaleString() : '-'}</td>
                  <td>{entry.credit > 0 ? entry.credit.toLocaleString() : '-'}</td>
                  <td>{entry.balance.toLocaleString()}</td>
                  <td>
                    <div className="flex space-x-2">
                      <button
                        className="text-blue-600 hover:text-blue-800"
                        onClick={() => handleEditTransaction(entry)}
                      >
                        Edit
                      </button>
                      <button
                        className="text-red-600 hover:text-red-800"
                        onClick={() => handleDeleteTransaction(entry)}
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Add Transaction Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Add New Transaction</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <input
                  type="date"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.date}
                  onChange={(e) => setNewTransaction({...newTransaction, date: e.target.value})}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.description}
                  onChange={(e) => setNewTransaction({...newTransaction, description: e.target.value})}
                  placeholder="Enter transaction description"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Debit Amount (AED)</label>
                <input
                  type="number"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.debit || ''}
                  onChange={(e) => setNewTransaction({...newTransaction, debit: Number(e.target.value), credit: 0})}
                  placeholder="0"
                  min="0"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Credit Amount (AED)</label>
                <input
                  type="number"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.credit || ''}
                  onChange={(e) => setNewTransaction({...newTransaction, credit: Number(e.target.value), debit: 0})}
                  placeholder="0"
                  min="0"
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-2 mt-6">
              <button 
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                onClick={() => setShowAddModal(false)}
              >
                Cancel
              </button>
              <button 
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                onClick={handleSaveTransaction}
              >
                Save Transaction
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Transaction Modal */}
      {showEditModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Edit Transaction</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <input
                  type="date"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.date}
                  onChange={(e) => setNewTransaction({...newTransaction, date: e.target.value})}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.description}
                  onChange={(e) => setNewTransaction({...newTransaction, description: e.target.value})}
                  placeholder="Enter transaction description"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Debit Amount (AED)</label>
                <input
                  type="number"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.debit || ''}
                  onChange={(e) => setNewTransaction({...newTransaction, debit: Number(e.target.value), credit: 0})}
                  placeholder="0"
                  min="0"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Credit Amount (AED)</label>
                <input
                  type="number"
                  className="w-full p-2 border rounded-md"
                  value={newTransaction.credit || ''}
                  onChange={(e) => setNewTransaction({...newTransaction, credit: Number(e.target.value), debit: 0})}
                  placeholder="0"
                  min="0"
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-2 mt-6">
              <button 
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                onClick={() => {
                  setShowEditModal(false);
                  setSelectedTransaction(null);
                  setNewTransaction({
                    date: new Date().toISOString().split('T')[0],
                    description: '',
                    debit: 0,
                    credit: 0
                  });
                }}
              >
                Cancel
              </button>
              <button 
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                onClick={handleSaveEdit}
              >
                Save Changes
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Delete Transaction</h2>
            <p className="text-gray-600 mb-6">
              Are you sure you want to delete this transaction? This action cannot be undone.
            </p>
            
            <div className="flex justify-end space-x-2">
              <button 
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                onClick={() => {
                  setShowDeleteModal(false);
                  setSelectedTransaction(null);
                }}
              >
                Cancel
              </button>
              <button 
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                onClick={handleConfirmDelete}
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const Inventory = () => {
  const { globalSearchQuery } = useSearch();
  const [inventory, setInventory] = useState([
    { id: 1, name: 'Product A', sku: 'SKU001', category: 'Electronics', quantity: 50, price: 1200 },
    { id: 2, name: 'Product B', sku: 'SKU002', category: 'Furniture', quantity: 25, price: 3500 },
    { id: 3, name: 'Product C', sku: 'SKU003', category: 'Stationery', quantity: 100, price: 150 },
    { id: 4, name: 'Product D', sku: 'SKU004', category: 'Electronics', quantity: 30, price: 2000 },
    { id: 5, name: 'Product E', sku: 'SKU005', category: 'Furniture', quantity: 15, price: 4500 },
  ]);
  
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [currentItem, setCurrentItem] = useState<any>(null);
  const [localSearchQuery, setLocalSearchQuery] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('All Categories');
  const [customCategory, setCustomCategory] = useState('');
  
  // Use global search query if available, otherwise use local search
  const effectiveSearchQuery = globalSearchQuery || localSearchQuery;
  
  // Filter inventory based on search query and category filter
  const filteredInventory = inventory.filter(item => {
    // Search query filter
    const matchesSearch = effectiveSearchQuery === '' || 
      item.name.toLowerCase().includes(effectiveSearchQuery.toLowerCase()) ||
      item.sku.toLowerCase().includes(effectiveSearchQuery.toLowerCase()) ||
      item.category.toLowerCase().includes(effectiveSearchQuery.toLowerCase()) ||
      item.price.toString().includes(effectiveSearchQuery) ||
      item.quantity.toString().includes(effectiveSearchQuery);
    
    // Category filter
    const matchesCategory = categoryFilter === 'All Categories' || item.category === categoryFilter;
    
    return matchesSearch && matchesCategory;
  });
  
  // Update local search when global search changes
  React.useEffect(() => {
    if (globalSearchQuery) {
      setLocalSearchQuery('');
    }
  }, [globalSearchQuery]);

  const handleEdit = (item: any) => {
    setCurrentItem({...item});
    setCustomCategory(item.category !== 'Electronics' && item.category !== 'Furniture' && item.category !== 'Stationery' ? item.category : '');
    setShowEditModal(true);
  };

  const handleDelete = (item: any) => {
    setCurrentItem(item);
    setShowDeleteModal(true);
  };

  const handleAdd = () => {
    setCurrentItem({
      id: inventory.length + 1,
      name: '',
      sku: `SKU00${inventory.length + 1}`,
      category: 'Electronics',
      quantity: 0,
      price: 0
    });
    setCustomCategory('');
    setShowAddModal(true);
  };

  const confirmDelete = () => {
    if (currentItem) {
      setInventory(inventory.filter(item => item.id !== currentItem.id));
      setShowDeleteModal(false);
    }
  };

  const handleSaveEdit = () => {
    if (currentItem) {
      // If "Other" is selected, use the custom category
      if (currentItem.category === 'Other' && customCategory.trim() !== '') {
        setInventory(inventory.map(item => 
          item.id === currentItem.id 
            ? {...currentItem, category: customCategory.trim()} 
            : item
        ));
      } else {
        setInventory(inventory.map(item => item.id === currentItem.id ? currentItem : item));
      }
      setShowEditModal(false);
    }
  };

  const handleSaveNew = () => {
    // If "Other" is selected, use the custom category
    if (currentItem.category === 'Other' && customCategory.trim() !== '') {
      setInventory([...inventory, {...currentItem, category: customCategory.trim()}]);
    } else {
      setInventory([...inventory, currentItem]);
    }
    setShowAddModal(false);
  };

  // Get unique categories for the filter dropdown
  const uniqueCategories = Array.from(new Set(inventory.map(item => item.category)));

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Inventory</h1>
        <button className="btn-primary" onClick={handleAdd}>Add Product</button>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Total Products</h3>
          <p className="text-3xl font-bold mt-2">{inventory.length}</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Total Stock Value</h3>
          <p className="text-3xl font-bold mt-2">AED {inventory.reduce((sum, item) => sum + (item.quantity * item.price), 0).toLocaleString()}</p>
        </div>
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700">Low Stock Items</h3>
          <p className="text-3xl font-bold mt-2 text-yellow-600">{inventory.filter(item => item.quantity < 20).length}</p>
        </div>
      </div>
      
      <div className="card">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-medium text-gray-700">Product List</h3>
          <div className="flex space-x-2">
            <select 
              className="input-field" 
              value={categoryFilter} 
              onChange={(e) => setCategoryFilter(e.target.value)}
              style={{ position: 'relative', zIndex: 1 }}
            >
              <option>All Categories</option>
              <option>Electronics</option>
              <option>Furniture</option>
              <option>Stationery</option>
              {uniqueCategories
                .filter(cat => cat !== 'Electronics' && cat !== 'Furniture' && cat !== 'Stationery')
                .map((category, index) => (
                  <option key={index}>{category}</option>
                ))
              }
            </select>
            <div className="relative">
              <input
                type="text"
                placeholder="Search products..."
                value={localSearchQuery}
                onChange={(e) => setLocalSearchQuery(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                style={{ position: 'relative', zIndex: 1 }}
              />
            </div>
          </div>
        </div>
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>SKU</th>
                <th>Category</th>
                <th>Quantity</th>
                <th>Price (AED)</th>
                <th>Value (AED)</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredInventory.map((item) => (
                <tr key={item.id} className={item.quantity < 20 ? 'bg-yellow-100 hover:bg-yellow-200 border-l-4 border-yellow-500' : 'hover:bg-gray-50'}>
                  <td>{item.name}</td>
                  <td>{item.sku}</td>
                  <td>{item.category}</td>
                  <td className={item.quantity < 20 ? 'text-yellow-600 font-bold' : ''}>{item.quantity}</td>
                  <td>{item.price.toLocaleString()}</td>
                  <td>{(item.quantity * item.price).toLocaleString()}</td>
                  <td>
                    <div className="flex space-x-2">
                      <button 
                        className="text-blue-600 hover:text-blue-800"
                        onClick={() => handleEdit(item)}
                      >
                        Edit
                      </button>
                      <button 
                        className="text-red-600 hover:text-red-800"
                        onClick={() => handleDelete(item)}
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Edit Product Modal */}
      {showEditModal && currentItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-md relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowEditModal(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-6" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              <h2 className="text-xl font-bold mb-4 border-b pb-3">Edit Product</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                  <input 
                    type="text" 
                    className="input-field" 
                    value={currentItem.name}
                    onChange={(e) => setCurrentItem({...currentItem, name: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">SKU</label>
                  <input 
                    type="text" 
                    className="input-field" 
                    value={currentItem.sku}
                    onChange={(e) => setCurrentItem({...currentItem, sku: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                  <select 
                    className="input-field"
                    value={currentItem.category === 'Electronics' || currentItem.category === 'Furniture' || currentItem.category === 'Stationery' ? currentItem.category : 'Other'}
                    onChange={(e) => setCurrentItem({...currentItem, category: e.target.value})}
                  >
                    <option>Electronics</option>
                    <option>Furniture</option>
                    <option>Stationery</option>
                    <option>Other</option>
                  </select>
                </div>
                {(currentItem.category === 'Other' || 
                  (currentItem.category !== 'Electronics' && 
                   currentItem.category !== 'Furniture' && 
                   currentItem.category !== 'Stationery')) && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Custom Category</label>
                    <input 
                      type="text" 
                      className="input-field" 
                      value={customCategory}
                      onChange={(e) => setCustomCategory(e.target.value)}
                      placeholder="Enter custom category"
                    />
                  </div>
                )}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                  <input 
                    type="number" 
                    className="input-field" 
                    value={currentItem.quantity}
                    onChange={(e) => setCurrentItem({...currentItem, quantity: Number(e.target.value)})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Price</label>
                  <input 
                    type="number" 
                    className="input-field" 
                    value={currentItem.price}
                    onChange={(e) => setCurrentItem({...currentItem, price: Number(e.target.value)})}
                  />
                </div>
              </div>
              
              <div className="flex justify-end space-x-4 mt-6 pt-4 border-t">
                <button 
                  className="btn-secondary"
                  onClick={() => setShowEditModal(false)}
                >
                  Cancel
                </button>
                <button 
                  className="btn-primary"
                  onClick={handleSaveEdit}
                >
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Add Product Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-md relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowAddModal(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-6" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              <h2 className="text-xl font-bold mb-4 border-b pb-3">Add New Product</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                  <input 
                    type="text" 
                    className="input-field" 
                    value={currentItem.name}
                    onChange={(e) => setCurrentItem({...currentItem, name: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">SKU</label>
                  <input 
                    type="text" 
                    className="input-field" 
                    value={currentItem.sku}
                    onChange={(e) => setCurrentItem({...currentItem, sku: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                  <select 
                    className="input-field"
                    value={currentItem.category}
                    onChange={(e) => setCurrentItem({...currentItem, category: e.target.value})}
                  >
                    <option>Electronics</option>
                    <option>Furniture</option>
                    <option>Stationery</option>
                    <option>Other</option>
                  </select>
                </div>
                {currentItem.category === 'Other' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Custom Category</label>
                    <input 
                      type="text" 
                      className="input-field" 
                      value={customCategory}
                      onChange={(e) => setCustomCategory(e.target.value)}
                      placeholder="Enter custom category"
                    />
                  </div>
                )}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                  <input 
                    type="number" 
                    className="input-field" 
                    value={currentItem.quantity}
                    onChange={(e) => setCurrentItem({...currentItem, quantity: Number(e.target.value)})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Price</label>
                  <input 
                    type="number" 
                    className="input-field" 
                    value={currentItem.price}
                    onChange={(e) => setCurrentItem({...currentItem, price: Number(e.target.value)})}
                  />
                </div>
              </div>
              
              <div className="flex justify-end space-x-4 mt-6 pt-4 border-t">
                <button 
                  className="btn-secondary"
                  onClick={() => setShowAddModal(false)}
                >
                  Cancel
                </button>
                <button 
                  className="btn-primary"
                  onClick={handleSaveNew}
                >
                  Add Product
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && currentItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center" style={{ zIndex: 9999 }}>
          <div 
            className="bg-white rounded-lg shadow-xl w-full max-w-md relative"
            style={{
              maxHeight: '90vh',
              margin: '20px',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            {/* Close button */}
            <button 
              onClick={() => setShowDeleteModal(false)}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none z-10"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="overflow-y-auto p-6" style={{ maxHeight: 'calc(90vh - 40px)' }}>
              <h2 className="text-xl font-bold mb-4 border-b pb-3">Confirm Delete</h2>
              <p className="mb-6">Are you sure you want to delete <span className="font-medium">{currentItem.name}</span>? This action cannot be undone.</p>
              
              <div className="flex justify-end space-x-4">
                <button 
                  className="btn-secondary"
                  onClick={() => setShowDeleteModal(false)}
                >
                  Cancel
                </button>
                <button 
                  className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md"
                  onClick={confirmDelete}
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const Reports = () => {
  const { invoices } = useInvoices();
  const { inventory } = useInventory();
  const { ledgerEntries } = useAccounting();
  const [selectedReport, setSelectedReport] = useState('');
  const [dateRange, setDateRange] = useState({
    startDate: new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0]
  });
  const [showReportModal, setShowReportModal] = useState(false);
  const [reportData, setReportData] = useState(null);
  const [statusFilter, setStatusFilter] = useState('All');

  // Function to calculate VAT Summary
  const calculateVATSummary = (startDate, endDate) => {
    // Ensure we have invoices data
    if (!invoices || invoices.length === 0) {
      return {
        salesVAT: 0,
        purchaseVAT: 0,
        netVATPayable: 0,
        totalSales: 0,
        totalPurchases: 0,
        salesInvoices: [],
        purchaseInvoices: [],
        message: "No invoice data available"
      };
    }

    const salesInvoices = invoices.filter(inv => 
      inv.type === 'sales' && 
      inv.date >= startDate && 
      inv.date <= endDate
    );
    
    const purchaseInvoices = invoices.filter(inv => 
      inv.type === 'purchase' && 
      inv.date >= startDate && 
      inv.date <= endDate
    );

    const salesVAT = salesInvoices.reduce((total, inv) => {
      return total + (inv.amount * (inv.taxRate / 100));
    }, 0);

    const purchaseVAT = purchaseInvoices.reduce((total, inv) => {
      return total + (inv.amount * (inv.taxRate / 100));
    }, 0);

    const netVATPayable = salesVAT - purchaseVAT;

    return {
      salesVAT,
      purchaseVAT,
      netVATPayable,
      totalSales: salesInvoices.reduce((total, inv) => total + inv.amount, 0),
      totalPurchases: purchaseInvoices.reduce((total, inv) => total + inv.amount, 0),
      salesInvoices,
      purchaseInvoices
    };
  };

  // Function to calculate Corporate Tax
  const calculateCorporateTax = (startDate, endDate) => {
    // Ensure we have invoices data
    if (!invoices || invoices.length === 0) {
      return {
        totalRevenue: 0,
        isEligible: false,
        taxAmount: 0,
        revenueByCustomer: {},
        monthlyRevenue: {},
        projectedRevenue: 0,
        message: "No invoice data available"
      };
    }

    // Filter sales invoices within the date range
    const salesInvoices = invoices.filter(inv => 
      inv.type === 'sales' && 
      inv.date >= startDate && 
      inv.date <= endDate
    );
    
    // Calculate total revenue
    const totalRevenue = salesInvoices.reduce((sum, inv) => sum + inv.amount, 0);
    
    // Check eligibility (threshold is 375,000 AED)
    const isEligible = totalRevenue > 375000;
    
    // Calculate tax amount (9% of revenue if eligible)
    const taxAmount = isEligible ? totalRevenue * 0.09 : 0;
    
    // Group revenue by customer
    const revenueByCustomer = salesInvoices.reduce((acc, inv) => {
      if (!acc[inv.customer]) {
        acc[inv.customer] = 0;
      }
      acc[inv.customer] += inv.amount;
      return acc;
    }, {});
    
    // Group revenue by month
    const monthlyRevenue = salesInvoices.reduce((acc, inv) => {
      const month = inv.date.substring(0, 7); // Format: YYYY-MM
      if (!acc[month]) {
        acc[month] = 0;
      }
      acc[month] += inv.amount;
      return acc;
    }, {});
    
    // Calculate projected revenue (simple projection based on average monthly revenue)
    const monthsInRange = Object.keys(monthlyRevenue).length || 1;
    const projectedRevenue = (totalRevenue / monthsInRange) * 3; // 3 months projection
    
    return {
      totalRevenue,
      isEligible,
      taxAmount,
      revenueByCustomer,
      monthlyRevenue,
      projectedRevenue
    };
  };

  // Function to get invoice report data
  const getInvoiceReport = (type, startDate, endDate, status) => {
    // Ensure we have invoices data
    if (!invoices || invoices.length === 0) {
      return {
        invoices: [],
        totalAmount: 0,
        totalVAT: 0,
        groupedInvoices: {},
        message: "No invoice data available"
      };
    }

    let filteredInvoices = invoices.filter(inv => 
      inv.type === type && 
      inv.date >= startDate && 
      inv.date <= endDate
    );

    if (status !== 'All') {
      filteredInvoices = filteredInvoices.filter(inv => inv.status === status);
    }

    // Calculate totals
    const totalAmount = filteredInvoices.reduce((sum, inv) => sum + inv.amount, 0);
    const totalVAT = filteredInvoices.reduce((sum, inv) => sum + (inv.amount * inv.taxRate / 100), 0);

    // Group by customer/vendor
    const groupedInvoices = filteredInvoices.reduce((acc, inv) => {
      if (!acc[inv.customer]) {
        acc[inv.customer] = {
          invoices: [],
          totalAmount: 0,
          totalVAT: 0
        };
      }
      acc[inv.customer].invoices.push(inv);
      acc[inv.customer].totalAmount += inv.amount;
      acc[inv.customer].totalVAT += (inv.amount * inv.taxRate / 100);
      return acc;
    }, {});

    return {
      invoices: filteredInvoices,
      totalAmount,
      totalVAT,
      groupedInvoices
    };
  };

  // Function to get inventory report data
  const getInventoryReport = (reportType) => {
    // Ensure we have inventory data
    if (!inventory || inventory.length === 0) {
      return {
        inventory: [],
        totalValue: 0,
        lowStockItems: [],
        byCategory: {},
        message: "No inventory data available"
      };
    }

    if (reportType === 'stockSummary') {
      // Calculate total stock value and group by categories
      const totalValue = inventory.reduce((sum, item) => sum + (item.quantity * item.price), 0);
      const lowStockItems = inventory.filter(item => item.quantity < (item.reorderLevel || 20));
      
      // Group by category
      const byCategory = inventory.reduce((acc, item) => {
        const category = item.category || 'Uncategorized';
        if (!acc[category]) {
          acc[category] = {
            items: [],
            totalValue: 0,
            totalQuantity: 0
          };
        }
        acc[category].items.push(item);
        acc[category].totalValue += (item.quantity * item.price);
        acc[category].totalQuantity += item.quantity;
        return acc;
      }, {});
      
      return {
        inventory,
        totalValue,
        lowStockItems,
        byCategory
      };
    }
    
    return null;
  };

  // Function to get accounting report data
  const getAccountingReport = (reportType, startDate, endDate) => {
    // Ensure we have ledger entries data
    if (!ledgerEntries || ledgerEntries.length === 0) {
      return {
        income: 0,
        expenses: 0,
        netProfit: 0,
        incomeByCategory: {},
        expensesByCategory: {},
        transactions: [],
        message: "No accounting data available"
      };
    }

    // Filter transactions by date range
    const filteredTransactions = ledgerEntries.filter(entry => 
      entry.date >= startDate && entry.date <= endDate
    );
    
    if (reportType === 'profitLoss') {
      // Calculate income and expenses
      const income = filteredTransactions
        .filter(entry => entry.type === 'income')
        .reduce((sum, entry) => sum + entry.amount, 0);
        
      const expenses = filteredTransactions
        .filter(entry => entry.type === 'expense')
        .reduce((sum, entry) => sum + entry.amount, 0);
        
      const netProfit = income - expenses;
      
      // Group by category
      const incomeByCategory = filteredTransactions
        .filter(entry => entry.type === 'income')
        .reduce((acc, entry) => {
          const category = entry.category || 'Uncategorized';
          acc[category] = (acc[category] || 0) + entry.amount;
          return acc;
        }, {});
        
      const expensesByCategory = filteredTransactions
        .filter(entry => entry.type === 'expense')
        .reduce((acc, entry) => {
          const category = entry.category || 'Uncategorized';
          acc[category] = (acc[category] || 0) + entry.amount;
          return acc;
        }, {});
      
      return {
        income,
        expenses,
        netProfit,
        incomeByCategory,
        expensesByCategory,
        transactions: filteredTransactions
      };
    }
    
    return null;
  };

  const exportToExcel = () => {
    if (!reportData) return;

    let csvContent = '';
    const separator = ',';

    switch (selectedReport) {
      case 'vatSummary':
        // VAT Summary Sheet
        csvContent = 'VAT Summary Report\n';
        csvContent += `Period: ${dateRange.startDate} to ${dateRange.endDate}\n\n`;
        csvContent += 'Category,Net Amount,VAT Amount,Total Amount\n';
        
        // Sales
        csvContent += `Sales,${reportData.totalSales},${reportData.salesVAT},${reportData.totalSales + reportData.salesVAT}\n`;
        // Purchases
        csvContent += `Purchases,${reportData.totalPurchases},${reportData.purchaseVAT},${reportData.totalPurchases + reportData.purchaseVAT}\n`;
        // Net VAT
        csvContent += `\nNet VAT Payable/Refundable,${reportData.netVATPayable}\n`;
        break;

      case 'corporateTax':
        // Corporate Tax Sheet
        csvContent = 'Corporate Tax Eligibility Report\n';
        csvContent += `Period: ${dateRange.startDate} to ${dateRange.endDate}\n\n`;
        csvContent += `Total Revenue,${reportData.totalRevenue}\n`;
        csvContent += `Tax Eligibility Threshold,375000\n`;
        csvContent += `Eligible for Corporate Tax,${reportData.isEligible ? 'Yes' : 'No'}\n`;
        csvContent += `Estimated Tax Amount (9%),${reportData.taxAmount}\n\n`;
        
        // Revenue Breakdown
        csvContent += '\nRevenue by Customer\n';
        csvContent += 'Customer,Revenue\n';
        Object.entries(reportData.revenueByCustomer).forEach(([customer, revenue]) => {
          csvContent += `${customer},${revenue}\n`;
        });

        // Monthly Trend
        csvContent += '\nMonthly Revenue Trend\n';
        csvContent += 'Month,Revenue\n';
        Object.entries(reportData.monthlyRevenue).forEach(([month, revenue]) => {
          csvContent += `${month},${revenue}\n`;
        });

        csvContent += `\nProjected Revenue (3 months),${reportData.projectedRevenue}\n`;
        break;

      case 'salesInvoice':
      case 'purchaseInvoice':
        // Invoice Report Sheet
        const type = selectedReport === 'salesInvoice' ? 'Sales' : 'Purchase';
        csvContent = `${type} Invoice Report\n`;
        csvContent += `Period: ${dateRange.startDate} to ${dateRange.endDate}\n`;
        csvContent += `Status Filter: ${statusFilter}\n\n`;
        
        // Summary
        csvContent += 'Summary\n';
        csvContent += `Total Invoices,${reportData.invoices.length}\n`;
        csvContent += `Total Amount,${reportData.totalAmount}\n`;
        csvContent += `Total VAT,${reportData.totalVAT}\n\n`;
        
        // Detailed Report
        csvContent += 'Customer/Vendor,Invoice Number,Date,Amount,VAT Amount,Total Amount,Status\n';
        Object.entries(reportData.groupedInvoices).forEach(([customer, data]) => {
          data.invoices.forEach(invoice => {
            const vatAmount = (invoice.amount * invoice.taxRate) / 100;
            csvContent += `${customer},${invoice.number},${invoice.date},${invoice.amount},${vatAmount},${invoice.amount + vatAmount},${invoice.status}\n`;
          });
        });
        
        // Subtotals by Customer/Vendor
        csvContent += '\nSubtotals by Customer/Vendor\n';
        csvContent += 'Customer/Vendor,Total Amount,Total VAT\n';
        Object.entries(reportData.groupedInvoices).forEach(([customer, data]) => {
          csvContent += `${customer},${data.totalAmount},${data.totalVAT}\n`;
        });
        break;
        
      case 'stockSummary':
        // Stock Summary Sheet
        csvContent = 'Inventory Stock Summary Report\n';
        csvContent += `Date: ${new Date().toISOString().split('T')[0]}\n\n`;
        csvContent += 'Summary\n';
        csvContent += `Total Products,${reportData.inventory.length}\n`;
        csvContent += `Total Stock Value,${reportData.totalValue}\n`;
        csvContent += `Low Stock Items,${reportData.lowStockItems.length}\n\n`;
        
        // Detailed Report
        csvContent += 'Product Name,SKU,Category,Quantity,Unit Price,Total Value\n';
        reportData.inventory.forEach(item => {
          csvContent += `${item.name},${item.sku || ''},${item.category || 'Uncategorized'},${item.quantity},${item.price},${item.quantity * item.price}\n`;
        });
        
        // Category Breakdown
        csvContent += '\nCategory Breakdown\n';
        csvContent += 'Category,Total Products,Total Quantity,Total Value\n';
        Object.entries(reportData.byCategory).forEach(([category, data]) => {
          csvContent += `${category},${data.items.length},${data.totalQuantity},${data.totalValue}\n`;
        });
        break;
        
      case 'profitLoss':
        // Profit & Loss Sheet
        csvContent = 'Profit & Loss Statement\n';
        csvContent += `Period: ${dateRange.startDate} to ${dateRange.endDate}\n\n`;
        csvContent += 'Summary\n';
        csvContent += `Total Income,${reportData.income}\n`;
        csvContent += `Total Expenses,${reportData.expenses}\n`;
        csvContent += `Net Profit/Loss,${reportData.netProfit}\n\n`;
        
        // Income Breakdown
        csvContent += '\nIncome by Category\n';
        csvContent += 'Category,Amount\n';
        Object.entries(reportData.incomeByCategory).forEach(([category, amount]) => {
          csvContent += `${category},${amount}\n`;
        });
        
        // Expense Breakdown
        csvContent += '\nExpenses by Category\n';
        csvContent += 'Category,Amount\n';
        Object.entries(reportData.expensesByCategory).forEach(([category, amount]) => {
          csvContent += `${category},${amount}\n`;
        });
        break;
    }

    // Create and download the file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${selectedReport}_${dateRange.startDate}_to_${dateRange.endDate}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleReportClick = (reportType) => {
    setSelectedReport(reportType);
    let data;
    
    // Log data availability for debugging
    console.log('Generating report with data:', {
      invoices: invoices?.length || 0,
      inventory: inventory?.length || 0,
      ledgerEntries: ledgerEntries?.length || 0
    });
    
    switch (reportType) {
      case 'vatSummary':
        data = calculateVATSummary(dateRange.startDate, dateRange.endDate);
        break;
      case 'corporateTax':
        data = calculateCorporateTax(dateRange.startDate, dateRange.endDate);
        break;
      case 'salesInvoice':
        data = getInvoiceReport('sales', dateRange.startDate, dateRange.endDate, statusFilter);
        break;
      case 'purchaseInvoice':
        data = getInvoiceReport('purchase', dateRange.startDate, dateRange.endDate, statusFilter);
        break;
      case 'stockSummary':
        data = getInventoryReport('stockSummary');
        break;
      case 'stockMovement':
        // Placeholder for stock movement report
        data = { message: 'Stock Movement Report - Coming Soon' };
        break;
      case 'profitLoss':
        data = getAccountingReport('profitLoss', dateRange.startDate, dateRange.endDate);
        break;
      case 'balanceSheet':
      case 'cashFlow':
        // Placeholder for other accounting reports
        data = { message: `${reportType === 'balanceSheet' ? 'Balance Sheet' : 'Cash Flow Statement'} - Coming Soon` };
        break;
    }
    
    // Log the generated report data for debugging
    console.log('Generated report data:', data);
    
    setReportData(data);
    setShowReportModal(true);
  };

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold">Reports</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Financial Reports</h3>
          <ul className="space-y-2">
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('profitLoss')}
            >
              <p className="font-medium">Profit & Loss Statement</p>
              <p className="text-sm text-gray-500">View your business performance</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('balanceSheet')}
            >
              <p className="font-medium">Balance Sheet</p>
              <p className="text-sm text-gray-500">View your financial position</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('cashFlow')}
            >
              <p className="font-medium">Cash Flow Statement</p>
              <p className="text-sm text-gray-500">Track your cash movements</p>
            </li>
          </ul>
        </div>
        
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">VAT & Corporate Tax Reports</h3>
          <ul className="space-y-2">
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('vatSummary')}
            >
              <p className="font-medium">VAT Summary Report</p>
              <p className="text-sm text-gray-500">Shows total VAT collected (on sales invoices) and total VAT paid (on purchase invoices) in a given period</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('vatReturn')}
            >
              <p className="font-medium">VAT Return Report</p>
              <p className="text-sm text-gray-500">Prepares data needed for quarterly VAT return filing (total taxable sales, purchases, VAT payable, and refundable)</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('salesInvoice')}
            >
              <p className="font-medium">Sales Invoice Report</p>
              <p className="text-sm text-gray-500">Lists all sales invoices, including VAT collected</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('purchaseInvoice')}
            >
              <p className="font-medium">Purchase Invoice Report</p>
              <p className="text-sm text-gray-500">Lists all purchase invoices, including VAT paid</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('corporateTax')}
            >
              <p className="font-medium">Corporate Tax Eligibility Report</p>
              <p className="text-sm text-gray-500">Tracks total taxable income and shows whether the business exceeds AED 375,000, making it eligible for corporate tax (9%)</p>
            </li>
          </ul>
        </div>

        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Inventory Reports</h3>
          <ul className="space-y-2">
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('stockSummary')}
            >
              <p className="font-medium">Stock Summary</p>
              <p className="text-sm text-gray-500">View current stock levels</p>
            </li>
            <li 
              className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 cursor-pointer"
              onClick={() => handleReportClick('stockMovement')}
            >
              <p className="font-medium">Stock Movement</p>
              <p className="text-sm text-gray-500">Track inventory changes over time</p>
            </li>
          </ul>
        </div>
      </div>
      
      {/* Report Modal */}
      {showReportModal && reportData && (
        <div className="fixed inset-0 overflow-y-auto z-50">
          <div className="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
              <div className="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">
                    {selectedReport === 'vatSummary' ? 'VAT Summary Report' : 
                     selectedReport === 'corporateTax' ? 'Corporate Tax Eligibility Report' :
                     selectedReport === 'salesInvoice' ? 'Sales Invoice Report' :
                     selectedReport === 'purchaseInvoice' ? 'Purchase Invoice Report' :
                     selectedReport === 'stockSummary' ? 'Stock Summary Report' :
                     selectedReport === 'stockMovement' ? 'Stock Movement Report' :
                     selectedReport === 'profitLoss' ? 'Profit & Loss Statement' :
                     selectedReport === 'balanceSheet' ? 'Balance Sheet' :
                     'Cash Flow Statement'}
                  </h2>
                  <button 
                    onClick={() => setShowReportModal(false)}
                    className="text-gray-400 hover:text-gray-500 focus:outline-none"
                  >
                    <span className="sr-only">Close</span>
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <div className="mb-6 flex flex-wrap gap-4">
                  {selectedReport !== 'stockSummary' && selectedReport !== 'stockMovement' && (
                    <>
                      <div className="w-full sm:w-auto">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                        <input
                          type="date"
                          className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
                          value={dateRange.startDate}
                          onChange={(e) => setDateRange({...dateRange, startDate: e.target.value})}
                        />
                      </div>
                      <div className="w-full sm:w-auto">
                        <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                        <input
                          type="date"
                          className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
                          value={dateRange.endDate}
                          onChange={(e) => setDateRange({...dateRange, endDate: e.target.value})}
                        />
                      </div>
                    </>
                  )}
                  
                  {(selectedReport === 'salesInvoice' || selectedReport === 'purchaseInvoice') && (
                    <div className="w-full sm:w-auto">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                      <select
                        className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        value={statusFilter}
                        onChange={(e) => setStatusFilter(e.target.value)}
                      >
                        <option value="All">All Statuses</option>
                        <option value="Paid">Paid</option>
                        <option value="Pending">Pending</option>
                        <option value="Overdue">Overdue</option>
                      </select>
                    </div>
                  )}
                  
                  <div className="w-full sm:w-auto flex items-end">
                    <button 
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      onClick={exportToExcel}
                    >
                      Export to Excel
                    </button>
                  </div>
                </div>

                <div className="overflow-x-auto">
                  {/* Display report content based on selected report type */}
                  {/* This is a placeholder for the report content */}
                  {reportData.message ? (
                    <div className="text-center py-10">
                      <p className="text-lg text-gray-500">{reportData.message}</p>
                    </div>
                  ) : (
                    <div>
                      {/* Render appropriate report content based on selectedReport */}
                      {/* This would be expanded with the actual report rendering logic */}
                      <p className="text-gray-500">Report data is available for export. Click the Export to Excel button to download the report.</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const Settings = () => {
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold">Settings</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Company Profile</h3>
          <form className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Company Name</label>
              <input type="text" className="input-field" defaultValue="ABC Enterprises" />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">GST Number</label>
              <input type="text" className="input-field" defaultValue="22AAAAA0000A1Z5" />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
              <textarea className="input-field" rows={3} defaultValue="123 Business Park, Main Street, Mumbai - 400001" />
            </div>
            <button type="button" className="btn-primary">Save Changes</button>
          </form>
        </div>
        
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">User Management</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
              <div>
                <p className="font-medium">John Doe</p>
                <p className="text-sm text-gray-500">Administrator</p>
              </div>
              <button className="text-blue-600 hover:text-blue-800">Edit</button>
            </div>
            <div className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
              <div>
                <p className="font-medium">Jane Smith</p>
                <p className="text-sm text-gray-500">Accountant</p>
              </div>
              <button className="text-blue-600 hover:text-blue-800">Edit</button>
            </div>
            <button className="btn-primary w-full">Add User</button>
          </div>
        </div>
        
        <div className="card">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Preferences</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Financial Year</label>
              <select className="input-field">
                <option>April - March</option>
                <option>January - December</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Currency Format</label>
              <select className="input-field">
                <option>₹ 1,234.56</option>
                <option>1,234.56 ₹</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Date Format</label>
              <select className="input-field">
                <option>DD/MM/YYYY</option>
                <option>MM/DD/YYYY</option>
                <option>YYYY-MM-DD</option>
              </select>
            </div>
            <button type="button" className="btn-primary">Save Preferences</button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main App Component
const App: React.FC = () => {
  const [globalSearchQuery, setGlobalSearchQuery] = useState('');
  const [invoices, setInvoices] = useState<Invoice[]>([
    { id: 1, number: 'INV-001', customer: 'ABC Corp', date: '2023-10-01', amount: 15000, status: 'Paid', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Product A', quantity: 3, rate: 5000, deliveryDate: '2023-10-05' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 2, number: 'INV-002', customer: 'XYZ Ltd', date: '2023-10-05', amount: 8500, status: 'Pending', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Service B', quantity: 1, rate: 8500, deliveryDate: '2023-10-10' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 3, number: 'INV-003', customer: '123 Industries', date: '2023-10-10', amount: 12000, status: 'Overdue', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Product C', quantity: 2, rate: 6000, deliveryDate: '2023-10-15' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 4, number: 'INV-004', customer: 'Tech Solutions', date: '2023-10-15', amount: 9000, status: 'Paid', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Service D', quantity: 1, rate: 9000, deliveryDate: '2023-10-20' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 5, number: 'INV-005', customer: 'Global Traders', date: '2023-10-20', amount: 11500, status: 'Pending', taxRate: 5, type: 'sales', items: [{ id: 1, description: 'Product E', quantity: 5, rate: 2300, deliveryDate: '2023-10-25' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 6, number: 'PINV-001', customer: 'Supplier A', date: '2023-10-02', amount: 7500, status: 'Paid', taxRate: 5, type: 'purchase', items: [{ id: 1, description: 'Raw Material X', quantity: 10, rate: 750, deliveryDate: '2023-10-07' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 7, number: 'PINV-002', customer: 'Supplier B', date: '2023-10-07', amount: 12300, status: 'Pending', taxRate: 5, type: 'purchase', items: [{ id: 1, description: 'Equipment Y', quantity: 1, rate: 12300, deliveryDate: '2023-10-12' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
    { id: 8, number: 'PINV-003', customer: 'Supplier C', date: '2023-10-12', amount: 5600, status: 'Overdue', taxRate: 5, type: 'purchase', items: [{ id: 1, description: 'Office Supplies', quantity: 4, rate: 1400, deliveryDate: '2023-10-17' }], terms: 'Payment is due within 15 days. Please make the payment via bank transfer or cheque.', notes: 'Thank you for your business!' },
  ]);
  
  const [inventory, setInventory] = useState([
    { id: 1, name: 'Product A', sku: 'SKU001', category: 'Electronics', quantity: 50, price: 5000, reorderLevel: 10 },
    { id: 2, name: 'Product B', sku: 'SKU002', category: 'Furniture', quantity: 30, price: 8500, reorderLevel: 5 },
    { id: 3, name: 'Product C', sku: 'SKU003', category: 'Electronics', quantity: 15, price: 6000, reorderLevel: 5 },
    { id: 4, name: 'Product D', sku: 'SKU004', category: 'Office Supplies', quantity: 100, price: 500, reorderLevel: 20 },
    { id: 5, name: 'Product E', sku: 'SKU005', category: 'Furniture', quantity: 10, price: 12000, reorderLevel: 2 },
  ]);
  
  const [ledgerEntries, setLedgerEntries] = useState([
    { id: 1, date: '2023-10-01', description: 'Initial Investment', type: 'income', category: 'Capital', amount: 100000, balance: 100000 },
    { id: 2, date: '2023-10-05', description: 'Office Rent', type: 'expense', category: 'Rent', amount: 15000, balance: 85000 },
    { id: 3, date: '2023-10-10', description: 'Sales Revenue', type: 'income', category: 'Sales', amount: 35000, balance: 120000 },
    { id: 4, date: '2023-10-15', description: 'Utility Bills', type: 'expense', category: 'Utilities', amount: 5000, balance: 115000 },
    { id: 5, date: '2023-10-20', description: 'Equipment Purchase', type: 'expense', category: 'Equipment', amount: 25000, balance: 90000 },
    { id: 6, date: '2023-10-25', description: 'Consulting Services', type: 'income', category: 'Services', amount: 20000, balance: 110000 },
  ]);

  return (
    <SearchContext.Provider value={{ globalSearchQuery, setGlobalSearchQuery }}>
      <InvoiceContext.Provider value={{ invoices, setInvoices }}>
        <InventoryContext.Provider value={{ inventory, setInventory }}>
          <AccountingContext.Provider value={{ ledgerEntries, setLedgerEntries }}>
            <Router>
              <Routes>
                <Route path="/" element={<Layout><Dashboard /></Layout>} />
                <Route path="/invoices" element={<Layout><Invoices /></Layout>} />
                <Route path="/accounting" element={<Layout><Accounting /></Layout>} />
                <Route path="/inventory" element={<Layout><Inventory /></Layout>} />
                <Route path="/reports" element={<Layout><Reports /></Layout>} />
                <Route path="/settings" element={<Layout><Settings /></Layout>} />
              </Routes>
            </Router>
          </AccountingContext.Provider>
        </InventoryContext.Provider>
      </InvoiceContext.Provider>
    </SearchContext.Provider>
  );
};

export default App; 
